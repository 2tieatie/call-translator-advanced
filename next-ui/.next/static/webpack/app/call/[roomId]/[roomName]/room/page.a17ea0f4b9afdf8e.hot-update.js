"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/call/[roomId]/[roomName]/room/page",{

/***/ "(app-pages-browser)/./app/utils/socketNetworkHandlers.ts":
/*!********************************************!*\
  !*** ./app/utils/socketNetworkHandlers.ts ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPeerConnection: function() { return /* binding */ createPeerConnection; },\n/* harmony export */   handleNegotiationNeededEvent: function() { return /* binding */ handleNegotiationNeededEvent; },\n/* harmony export */   invite: function() { return /* binding */ invite; },\n/* harmony export */   onConnect: function() { return /* binding */ onConnect; },\n/* harmony export */   onData: function() { return /* binding */ onData; },\n/* harmony export */   onUserConnect: function() { return /* binding */ onUserConnect; },\n/* harmony export */   onUserDisconnected: function() { return /* binding */ onUserDisconnected; },\n/* harmony export */   onUserList: function() { return /* binding */ onUserList; },\n/* harmony export */   sendViaServer: function() { return /* binding */ sendViaServer; },\n/* harmony export */   start_webrtc: function() { return /* binding */ start_webrtc; },\n/* harmony export */   updateRemotePeerConnections: function() { return /* binding */ updateRemotePeerConnections; }\n/* harmony export */ });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/utils/utils */ \"(app-pages-browser)/./app/utils/utils.ts\");\n\nlet myID;\nlet _peer_list = {};\nconst onConnect = (socket, roomId, roomName, displayName, language)=>{\n    console.log(\"socket connected....\");\n    socket.emit(\"join-room\", {\n        room_id: roomId,\n        room_name: roomName,\n        display_name: displayName,\n        language: language\n    });\n};\nconst onUserConnect = (data)=>{\n    console.log(\"user-connect \", data);\n    let peer_id = data[\"sid\"];\n    let display_name = data[\"name\"];\n    _peer_list[peer_id] = undefined;\n    (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.addVideoElement)(peer_id, display_name);\n};\nconst onUserDisconnected = (data)=>{\n    console.log(\"user-disconnect \", data);\n    let peer_id = data[\"sid\"];\n    closeConnection(peer_id);\n    (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.removeVideoElement)(peer_id);\n};\nconst onUserList = (data, socket, myVideo)=>{\n    console.log(\"user list recvd \", data);\n    myID = data[\"my_id\"];\n    if (\"list\" in data) {\n        let recvd_list = data[\"list\"];\n        try {\n            for(const peer_id in _peer_list){\n                if (!recvd_list.hasOwnProperty(peer_id)) {\n                    closeConnection(peer_id);\n                    (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.removeVideoElement)(peer_id);\n                }\n            }\n        } catch (ex) {\n            console.log(ex);\n        }\n        // add existing users to user list\n        for(let peer_id in recvd_list){\n            let display_name = recvd_list[peer_id];\n            _peer_list[peer_id] = undefined;\n            (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.addVideoElement)(peer_id, display_name);\n        }\n        start_webrtc(myVideo, socket);\n    }\n};\nconst closeConnection = (peer_id)=>{\n    if (peer_id in _peer_list) {\n        _peer_list[peer_id].onicecandidate = null;\n        _peer_list[peer_id].ontrack = null;\n        _peer_list[peer_id].onnegotiationneeded = null;\n        delete _peer_list[peer_id]; // remove user from user list\n    }\n};\nconst log_user_list = ()=>{\n    for(let key in _peer_list){\n        console.log(\"\".concat(key, \": \").concat(_peer_list[key]));\n    }\n};\n//---------------[ webrtc ]--------------------\nlet PC_CONFIG = {\n    iceServers: [\n        {\n            urls: [\n                \"stun:stun.l.google.com:19302\",\n                \"stun:stun1.l.google.com:19302\"\n            ]\n        }\n    ]\n};\nconst log_error = (e)=>{\n    console.log(\"[ERROR] \", e);\n};\nconst sendViaServer = (data, socket)=>{\n    socket.emit(\"data\", data);\n};\nconst onData = (msg, socket, myVideo)=>{\n    switch(msg[\"type\"]){\n        case \"offer\":\n            handleOfferMsg(msg, socket, myVideo);\n            break;\n        case \"answer\":\n            handleAnswerMsg(msg);\n            break;\n        case \"new-ice-candidate\":\n            handleNewICECandidateMsg(msg);\n            break;\n    }\n};\nconst start_webrtc = (myVideo, socket)=>{\n    // send offer to all other members\n    for(let peer_id in _peer_list){\n        invite(peer_id, myVideo, socket);\n    }\n};\nconst invite = (peer_id, myVideo, socket)=>{\n    if (_peer_list[peer_id]) {\n        console.log(\"[Not supposed to happen!] Attempting to start a connection that already exists!\");\n        return;\n    } else if (peer_id === myID) {\n        console.log(\"[Not supposed to happen!] Trying to connect to self!\");\n        return;\n    } else {\n        console.log(\"Creating peer connection for <\".concat(peer_id, \"> ...\"));\n        createPeerConnection(peer_id, socket);\n        let local_stream = myVideo === null || myVideo === void 0 ? void 0 : myVideo.srcObject;\n        //   let local_stream: MediaProvider | HTMLVideoElement | null = document.getElementById('local_stream') as HTMLVideoElement\n        //   if (local_stream) {\n        //       local_stream = local_stream.srcObject\n        //   }\n        if (local_stream && local_stream instanceof MediaStream) {\n            local_stream.getTracks().forEach((track)=>{\n                _peer_list[peer_id].addTrack(track, local_stream);\n            });\n        } else {\n            console.error(\"Local stream is null or not a MediaStream\");\n            console.log(myVideo);\n        }\n    }\n};\nconst createPeerConnection = (peer_id, socket)=>{\n    _peer_list[peer_id] = new RTCPeerConnection(PC_CONFIG);\n    _peer_list[peer_id].onicecandidate = (event)=>{\n        handleICECandidateEvent(event, peer_id, socket);\n    };\n    _peer_list[peer_id].ontrack = (event)=>{\n        handleTrackEvent(event, peer_id);\n    };\n    _peer_list[peer_id].onnegotiationneeded = ()=>{\n        handleNegotiationNeededEvent(peer_id, socket);\n    };\n};\nconst handleNegotiationNeededEvent = (peer_id, socket)=>{\n    _peer_list[peer_id].createOffer().then((offer)=>{\n        return _peer_list[peer_id].setLocalDescription(offer);\n    }).then(()=>{\n        console.log(\"sending offer to <\".concat(peer_id, \"> ...\"));\n        sendViaServer({\n            \"sender_id\": myID,\n            \"target_id\": peer_id,\n            \"type\": \"offer\",\n            \"sdp\": _peer_list[peer_id].localDescription\n        }, socket);\n    }).catch(log_error);\n};\nconst handleOfferMsg = (msg, socket, myVideo)=>{\n    let peer_id = msg[\"sender_id\"];\n    console.log(\"offer recieved from <\".concat(peer_id, \">\"));\n    createPeerConnection(peer_id, socket);\n    let desc = new RTCSessionDescription(msg[\"sdp\"]);\n    _peer_list[peer_id].setRemoteDescription(desc).then(()=>{\n        let local_stream = myVideo.srcObject;\n        local_stream.getTracks().forEach((track)=>{\n            try {\n                _peer_list[peer_id].addTrack(track, local_stream);\n            } catch (error) {\n                console.log(error);\n            }\n        });\n    }).then(()=>{\n        return _peer_list[peer_id].createAnswer();\n    }).then((answer)=>{\n        return _peer_list[peer_id].setLocalDescription(answer);\n    }).then(()=>{\n        console.log(\"sending answer to <\".concat(peer_id, \"> ...\"));\n        sendViaServer({\n            \"sender_id\": myID,\n            \"target_id\": peer_id,\n            \"type\": \"answer\",\n            \"sdp\": _peer_list[peer_id].localDescription\n        }, socket);\n    }).catch(log_error);\n};\nconst handleAnswerMsg = (msg)=>{\n    let peer_id = msg[\"sender_id\"];\n    console.log(\"answer recieved from <\".concat(peer_id, \">\"));\n    let desc = new RTCSessionDescription(msg[\"sdp\"]);\n    _peer_list[peer_id].setRemoteDescription(desc);\n};\nconst handleICECandidateEvent = (event, peer_id, socket)=>{\n    if (event.candidate) {\n        sendViaServer({\n            \"sender_id\": myID,\n            \"target_id\": peer_id,\n            \"type\": \"new-ice-candidate\",\n            \"candidate\": event.candidate\n        }, socket);\n    }\n};\nconst handleNewICECandidateMsg = (msg)=>{\n    let peer_id;\n    console.log(\"ICE candidate recieved from <\".concat(peer_id, \">\"));\n    let candidate = new RTCIceCandidate(msg.candidate);\n    _peer_list[msg[\"sender_id\"]].addIceCandidate(candidate).catch(log_error);\n};\nconst handleTrackEvent = (event, peer_id)=>{\n    console.log(\"track event recieved from <\".concat(peer_id, \">\"));\n    if (event.streams && peer_id) {\n        const videoObj = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.getVideoObj)(peer_id);\n        if (!videoObj) {\n            return;\n        }\n        videoObj.srcObject = event.streams[0];\n    }\n};\nfunction updateRemotePeerConnections(newStream) {\n    for(const peerId in _peer_list){\n        if (_peer_list.hasOwnProperty(peerId)) {\n            const peerConnection = _peer_list[peerId];\n            const senders = peerConnection.getSenders();\n            senders.forEach((sender)=>{\n                if (sender.track.kind === \"video\") {\n                    sender.replaceTrack(newStream.getVideoTracks()[0]);\n                }\n            });\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC91dGlscy9zb2NrZXROZXR3b3JrSGFuZGxlcnMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQStFO0FBRS9FLElBQUlHO0FBQ0osSUFBSUMsYUFBa0IsQ0FBQztBQUVoQixNQUFNQyxZQUFZLENBQUNDLFFBQWFDLFFBQWFDLFVBQWVDLGFBQWtCQztJQUNqRkMsUUFBUUMsR0FBRyxDQUFDO0lBQ1pOLE9BQU9PLElBQUksQ0FBQyxhQUFhO1FBQUNDLFNBQVNQO1FBQVFRLFdBQVdQO1FBQVVRLGNBQWNQO1FBQWFDLFVBQVVBO0lBQVE7QUFDakgsRUFBQztBQUVNLE1BQU1PLGdCQUFnQixDQUFDQztJQUMxQlAsUUFBUUMsR0FBRyxDQUFDLGlCQUFpQk07SUFDN0IsSUFBSUMsVUFBVUQsSUFBSSxDQUFDLE1BQU07SUFDekIsSUFBSUYsZUFBZUUsSUFBSSxDQUFDLE9BQU87SUFDL0JkLFVBQVUsQ0FBQ2UsUUFBUSxHQUFHQztJQUN0QnBCLDZEQUFlQSxDQUFDbUIsU0FBU0g7QUFDN0IsRUFBQztBQUNNLE1BQU1LLHFCQUFxQixDQUFDSDtJQUMvQlAsUUFBUUMsR0FBRyxDQUFDLG9CQUFvQk07SUFDaEMsSUFBSUMsVUFBVUQsSUFBSSxDQUFDLE1BQU07SUFDekJJLGdCQUFnQkg7SUFDaEJqQixnRUFBa0JBLENBQUNpQjtBQUN2QixFQUFDO0FBRU0sTUFBTUksYUFBYSxDQUFDTCxNQUFXWixRQUFha0I7SUFDL0NiLFFBQVFDLEdBQUcsQ0FBQyxvQkFBb0JNO0lBQ2hDZixPQUFPZSxJQUFJLENBQUMsUUFBUTtJQUVwQixJQUFJLFVBQVVBLE1BQ2Q7UUFDSSxJQUFJTyxhQUFhUCxJQUFJLENBQUMsT0FBTztRQUM3QixJQUFJO1lBQ0EsSUFBSyxNQUFNQyxXQUFXZixXQUFZO2dCQUM5QixJQUFJLENBQUNxQixXQUFXQyxjQUFjLENBQUNQLFVBQVU7b0JBQ3JDRyxnQkFBZ0JIO29CQUNoQmpCLGdFQUFrQkEsQ0FBQ2lC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O0FBR0EsTUFBTXFCLG1CQUFtQixDQUFDRixPQUFZckM7SUFFbENSLFFBQVFDLEdBQUcsQ0FBQyw4QkFBc0MsT0FBUk8sU0FBUTtJQUVsRCxJQUFJcUMsTUFBTWtCLE9BQU8sSUFBSXZELFNBQVM7UUFDMUIsTUFBTXdELFdBQVcxRSx5REFBV0EsQ0FBQ2tCO1FBQzdCLElBQUksQ0FBQ3dELFVBQVU7WUFDWDtRQUNKO1FBQ0FBLFNBQVMzQixTQUFTLEdBQUdRLE1BQU1rQixPQUFPLENBQUMsRUFBRTtJQUN6QztBQUNKO0FBRU8sU0FBU0UsNEJBQTRCQyxTQUEyQztJQUNuRixJQUFLLE1BQU1DLFVBQVUxRSxXQUFZO1FBQzdCLElBQUlBLFdBQVdzQixjQUFjLENBQUNvRCxTQUFTO1lBQ25DLE1BQU1DLGlCQUFpQjNFLFVBQVUsQ0FBQzBFLE9BQU87WUFDekMsTUFBTUUsVUFBVUQsZUFBZUUsVUFBVTtZQUN6Q0QsUUFBUTdCLE9BQU8sQ0FBQyxDQUFDK0I7Z0JBQ2IsSUFBSUEsT0FBTzlCLEtBQUssQ0FBQytCLElBQUksS0FBSyxTQUFTO29CQUMvQkQsT0FBT0UsWUFBWSxDQUFDUCxVQUFVUSxjQUFjLEVBQUUsQ0FBQyxFQUFFO2dCQUNyRDtZQUNKO1FBQ0o7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2FwcC91dGlscy9zb2NrZXROZXR3b3JrSGFuZGxlcnMudHM/MWM3MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2FkZFZpZGVvRWxlbWVudCwgZ2V0VmlkZW9PYmosIHJlbW92ZVZpZGVvRWxlbWVudH0gZnJvbSBcIkAvdXRpbHMvdXRpbHNcIjtcblxubGV0IG15SUQ6IGFueTtcbmxldCBfcGVlcl9saXN0OiBhbnkgPSB7fVxuXG5leHBvcnQgY29uc3Qgb25Db25uZWN0ID0gKHNvY2tldDogYW55LCByb29tSWQ6IGFueSwgcm9vbU5hbWU6IGFueSwgZGlzcGxheU5hbWU6IGFueSwgbGFuZ3VhZ2U6IGFueSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwic29ja2V0IGNvbm5lY3RlZC4uLi5cIik7XG4gICAgc29ja2V0LmVtaXQoXCJqb2luLXJvb21cIiwge3Jvb21faWQ6IHJvb21JZCwgcm9vbV9uYW1lOiByb29tTmFtZSwgZGlzcGxheV9uYW1lOiBkaXNwbGF5TmFtZSwgbGFuZ3VhZ2U6IGxhbmd1YWdlfSk7XG59XG5cbmV4cG9ydCBjb25zdCBvblVzZXJDb25uZWN0ID0gKGRhdGE6IGFueSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwidXNlci1jb25uZWN0IFwiLCBkYXRhKTtcbiAgICBsZXQgcGVlcl9pZCA9IGRhdGFbXCJzaWRcIl07XG4gICAgbGV0IGRpc3BsYXlfbmFtZSA9IGRhdGFbXCJuYW1lXCJdO1xuICAgIF9wZWVyX2xpc3RbcGVlcl9pZF0gPSB1bmRlZmluZWQ7XG4gICAgYWRkVmlkZW9FbGVtZW50KHBlZXJfaWQsIGRpc3BsYXlfbmFtZSk7XG59XG5leHBvcnQgY29uc3Qgb25Vc2VyRGlzY29ubmVjdGVkID0gKGRhdGE6IGFueSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwidXNlci1kaXNjb25uZWN0IFwiLCBkYXRhKTtcbiAgICBsZXQgcGVlcl9pZCA9IGRhdGFbXCJzaWRcIl07XG4gICAgY2xvc2VDb25uZWN0aW9uKHBlZXJfaWQpO1xuICAgIHJlbW92ZVZpZGVvRWxlbWVudChwZWVyX2lkKTtcbn1cblxuZXhwb3J0IGNvbnN0IG9uVXNlckxpc3QgPSAoZGF0YTogYW55LCBzb2NrZXQ6IGFueSwgbXlWaWRlbzogYW55KSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJ1c2VyIGxpc3QgcmVjdmQgXCIsIGRhdGEpO1xuICAgIG15SUQgPSBkYXRhW1wibXlfaWRcIl07XG5cbiAgICBpZiggXCJsaXN0XCIgaW4gZGF0YSkgLy8gbm90IHRoZSBmaXJzdCB0byBjb25uZWN0IHRvIHJvb20sIGV4aXN0aW5nIHVzZXIgbGlzdCByZWNpZXZlZFxuICAgIHtcbiAgICAgICAgbGV0IHJlY3ZkX2xpc3QgPSBkYXRhW1wibGlzdFwiXTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcGVlcl9pZCBpbiBfcGVlcl9saXN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyZWN2ZF9saXN0Lmhhc093blByb3BlcnR5KHBlZXJfaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb3NlQ29ubmVjdGlvbihwZWVyX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlVmlkZW9FbGVtZW50KHBlZXJfaWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGV4KVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIGV4aXN0aW5nIHVzZXJzIHRvIHVzZXIgbGlzdFxuICAgICAgICBmb3IobGV0IHBlZXJfaWQgaW4gcmVjdmRfbGlzdClcbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IGRpc3BsYXlfbmFtZSA9IHJlY3ZkX2xpc3RbcGVlcl9pZF07XG4gICAgICAgICAgICBfcGVlcl9saXN0W3BlZXJfaWRdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgYWRkVmlkZW9FbGVtZW50KHBlZXJfaWQsIGRpc3BsYXlfbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhcnRfd2VicnRjKG15VmlkZW8sIHNvY2tldCk7XG4gICAgfVxufVxuXG5jb25zdCBjbG9zZUNvbm5lY3Rpb24gPSAocGVlcl9pZDogc3RyaW5nKSA9PiB7XG4gICAgaWYocGVlcl9pZCBpbiBfcGVlcl9saXN0KVxuICAgIHtcbiAgICAgICAgX3BlZXJfbGlzdFtwZWVyX2lkXS5vbmljZWNhbmRpZGF0ZSA9IG51bGw7XG4gICAgICAgIF9wZWVyX2xpc3RbcGVlcl9pZF0ub250cmFjayA9IG51bGw7XG4gICAgICAgIF9wZWVyX2xpc3RbcGVlcl9pZF0ub25uZWdvdGlhdGlvbm5lZWRlZCA9IG51bGw7XG5cbiAgICAgICAgZGVsZXRlIF9wZWVyX2xpc3RbcGVlcl9pZF07IC8vIHJlbW92ZSB1c2VyIGZyb20gdXNlciBsaXN0XG4gICAgfVxufVxuXG5jb25zdCBsb2dfdXNlcl9saXN0ID0gKCkgPT4ge1xuICAgIGZvcihsZXQga2V5IGluIF9wZWVyX2xpc3QpXG4gICAge1xuICAgICAgICBjb25zb2xlLmxvZyhgJHtrZXl9OiAke19wZWVyX2xpc3Rba2V5XX1gKTtcbiAgICB9XG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tWyB3ZWJydGMgXS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmxldCBQQ19DT05GSUcgPSB7XG4gICAgaWNlU2VydmVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgICB1cmxzOiBbJ3N0dW46c3R1bi5sLmdvb2dsZS5jb206MTkzMDInLFxuICAgICAgICAgICAgICAgICAgICAnc3R1bjpzdHVuMS5sLmdvb2dsZS5jb206MTkzMDInLFxuICAgICAgICAgICAgICAgICAgICAvLyAnc3R1bjpzdHVuMi5sLmdvb2dsZS5jb206MTkzMDInLFxuICAgICAgICAgICAgICAgICAgICAvLyAnc3R1bjpzdHVuMy5sLmdvb2dsZS5jb206MTkzMDInLFxuICAgICAgICAgICAgICAgICAgICAvLyAnc3R1bjpzdHVuNC5sLmdvb2dsZS5jb206MTkzMDInXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICB9LFxuICAgIF1cbn07XG5cbmNvbnN0IGxvZ19lcnJvciA9IChlOiBhbnkpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIltFUlJPUl0gXCIsIGUpO1xufVxuXG5leHBvcnQgY29uc3Qgc2VuZFZpYVNlcnZlciA9IChkYXRhOiBhbnksIHNvY2tldDogYW55KSA9PiB7XG4gICAgc29ja2V0LmVtaXQoXCJkYXRhXCIsIGRhdGEpO1xufVxuXG5leHBvcnQgY29uc3Qgb25EYXRhID0gKG1zZzogYW55LCBzb2NrZXQ6IGFueSwgbXlWaWRlbzogYW55KSA9PiB7XG4gICAgc3dpdGNoKG1zZ1tcInR5cGVcIl0pXG4gICAge1xuICAgICAgICBjYXNlIFwib2ZmZXJcIjpcbiAgICAgICAgICAgIGhhbmRsZU9mZmVyTXNnKG1zZywgc29ja2V0LCBteVZpZGVvKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiYW5zd2VyXCI6XG4gICAgICAgICAgICBoYW5kbGVBbnN3ZXJNc2cobXNnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibmV3LWljZS1jYW5kaWRhdGVcIjpcbiAgICAgICAgICAgIGhhbmRsZU5ld0lDRUNhbmRpZGF0ZU1zZyhtc2cpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3Qgc3RhcnRfd2VicnRjID0gKG15VmlkZW86IGFueSwgc29ja2V0OiBhbnkpID0+IHtcbiAgICAvLyBzZW5kIG9mZmVyIHRvIGFsbCBvdGhlciBtZW1iZXJzXG4gICAgZm9yKGxldCBwZWVyX2lkIGluIF9wZWVyX2xpc3QpXG4gICAge1xuICAgICAgICBpbnZpdGUocGVlcl9pZCwgbXlWaWRlbywgc29ja2V0KTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBpbnZpdGUgPSAocGVlcl9pZDogc3RyaW5nLCBteVZpZGVvOiBhbnksIHNvY2tldDogYW55KSA9PiB7XG4gICAgaWYgKF9wZWVyX2xpc3RbcGVlcl9pZF0pIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJbTm90IHN1cHBvc2VkIHRvIGhhcHBlbiFdIEF0dGVtcHRpbmcgdG8gc3RhcnQgYSBjb25uZWN0aW9uIHRoYXQgYWxyZWFkeSBleGlzdHMhXCIpXG4gICAgICAgIHJldHVyblxuICAgIH1cbiAgICBlbHNlIGlmIChwZWVyX2lkID09PSBteUlEKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiW05vdCBzdXBwb3NlZCB0byBoYXBwZW4hXSBUcnlpbmcgdG8gY29ubmVjdCB0byBzZWxmIVwiKTtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGVsc2VcbiAgICB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBDcmVhdGluZyBwZWVyIGNvbm5lY3Rpb24gZm9yIDwke3BlZXJfaWR9PiAuLi5gKTtcbiAgICAgICAgY3JlYXRlUGVlckNvbm5lY3Rpb24ocGVlcl9pZCwgc29ja2V0KTtcblxuICAgICAgbGV0IGxvY2FsX3N0cmVhbSA9IG15VmlkZW8/LnNyY09iamVjdDtcbiAgICAgIC8vICAgbGV0IGxvY2FsX3N0cmVhbTogTWVkaWFQcm92aWRlciB8IEhUTUxWaWRlb0VsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvY2FsX3N0cmVhbScpIGFzIEhUTUxWaWRlb0VsZW1lbnRcbiAgICAgIC8vICAgaWYgKGxvY2FsX3N0cmVhbSkge1xuICAgICAgLy8gICAgICAgbG9jYWxfc3RyZWFtID0gbG9jYWxfc3RyZWFtLnNyY09iamVjdFxuICAgICAgLy8gICB9XG4gICAgICBpZiAobG9jYWxfc3RyZWFtICYmIGxvY2FsX3N0cmVhbSBpbnN0YW5jZW9mIE1lZGlhU3RyZWFtKSB7XG4gICAgICAgIGxvY2FsX3N0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKCh0cmFjazogYW55KT0+e19wZWVyX2xpc3RbcGVlcl9pZF0uYWRkVHJhY2sodHJhY2ssIGxvY2FsX3N0cmVhbSk7fSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdMb2NhbCBzdHJlYW0gaXMgbnVsbCBvciBub3QgYSBNZWRpYVN0cmVhbScpO1xuICAgICAgICBjb25zb2xlLmxvZyhteVZpZGVvKVxuICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVBlZXJDb25uZWN0aW9uID0gKHBlZXJfaWQ6IHN0cmluZywgc29ja2V0OiBhbnkpID0+IHtcbiAgICBfcGVlcl9saXN0W3BlZXJfaWRdID0gbmV3IFJUQ1BlZXJDb25uZWN0aW9uKFBDX0NPTkZJRyk7XG5cbiAgICBfcGVlcl9saXN0W3BlZXJfaWRdLm9uaWNlY2FuZGlkYXRlID0gKGV2ZW50OiBhbnkpID0+IHtoYW5kbGVJQ0VDYW5kaWRhdGVFdmVudChldmVudCwgcGVlcl9pZCwgc29ja2V0KX07XG4gICAgX3BlZXJfbGlzdFtwZWVyX2lkXS5vbnRyYWNrID0gKGV2ZW50OiBhbnkpID0+IHtoYW5kbGVUcmFja0V2ZW50KGV2ZW50LCBwZWVyX2lkKX07XG4gICAgX3BlZXJfbGlzdFtwZWVyX2lkXS5vbm5lZ290aWF0aW9ubmVlZGVkID0gKCkgPT4ge2hhbmRsZU5lZ290aWF0aW9uTmVlZGVkRXZlbnQocGVlcl9pZCwgc29ja2V0KX07XG59XG5cblxuZXhwb3J0IGNvbnN0IGhhbmRsZU5lZ290aWF0aW9uTmVlZGVkRXZlbnQgPSAocGVlcl9pZDogc3RyaW5nLCBzb2NrZXQ6IGFueSkgPT4ge1xuICAgIF9wZWVyX2xpc3RbcGVlcl9pZF0uY3JlYXRlT2ZmZXIoKVxuICAgIC50aGVuKChvZmZlcjogYW55KT0+e3JldHVybiBfcGVlcl9saXN0W3BlZXJfaWRdLnNldExvY2FsRGVzY3JpcHRpb24ob2ZmZXIpO30pXG4gICAgLnRoZW4oKCk9PntcbiAgICAgICAgY29uc29sZS5sb2coYHNlbmRpbmcgb2ZmZXIgdG8gPCR7cGVlcl9pZH0+IC4uLmApO1xuICAgICAgICBzZW5kVmlhU2VydmVyKHtcbiAgICAgICAgICAgIFwic2VuZGVyX2lkXCI6IG15SUQsXG4gICAgICAgICAgICBcInRhcmdldF9pZFwiOiBwZWVyX2lkLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2ZmZXJcIixcbiAgICAgICAgICAgIFwic2RwXCI6IF9wZWVyX2xpc3RbcGVlcl9pZF0ubG9jYWxEZXNjcmlwdGlvblxuICAgICAgICB9LCBzb2NrZXQpO1xuICAgIH0pXG4gICAgLmNhdGNoKGxvZ19lcnJvcik7XG59XG5cblxuY29uc3QgaGFuZGxlT2ZmZXJNc2cgPSAobXNnOiBhbnksIHNvY2tldDogYW55LCBteVZpZGVvOiBhbnkpID0+IHtcbiAgICBsZXQgcGVlcl9pZCA9IG1zZ1snc2VuZGVyX2lkJ107XG5cbiAgICBjb25zb2xlLmxvZyhgb2ZmZXIgcmVjaWV2ZWQgZnJvbSA8JHtwZWVyX2lkfT5gKTtcblxuICAgIGNyZWF0ZVBlZXJDb25uZWN0aW9uKHBlZXJfaWQsIHNvY2tldCk7XG4gICAgbGV0IGRlc2MgPSBuZXcgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKG1zZ1snc2RwJ10pO1xuICAgIF9wZWVyX2xpc3RbcGVlcl9pZF0uc2V0UmVtb3RlRGVzY3JpcHRpb24oZGVzYylcbiAgICAudGhlbigoKT0+e1xuICAgICAgICBsZXQgbG9jYWxfc3RyZWFtID0gbXlWaWRlby5zcmNPYmplY3Q7XG4gICAgICAgIGxvY2FsX3N0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKCh0cmFjazogYW55KT0+e1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBfcGVlcl9saXN0W3BlZXJfaWRdLmFkZFRyYWNrKHRyYWNrLCBsb2NhbF9zdHJlYW0pO1xuXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KVxuICAgIC50aGVuKCgpPT57cmV0dXJuIF9wZWVyX2xpc3RbcGVlcl9pZF0uY3JlYXRlQW5zd2VyKCk7fSlcbiAgICAudGhlbigoYW5zd2VyOiBhbnkpPT57cmV0dXJuIF9wZWVyX2xpc3RbcGVlcl9pZF0uc2V0TG9jYWxEZXNjcmlwdGlvbihhbnN3ZXIpO30pXG4gICAgLnRoZW4oKCk9PntcbiAgICAgICAgY29uc29sZS5sb2coYHNlbmRpbmcgYW5zd2VyIHRvIDwke3BlZXJfaWR9PiAuLi5gKTtcbiAgICAgICAgc2VuZFZpYVNlcnZlcih7XG4gICAgICAgICAgICBcInNlbmRlcl9pZFwiOiBteUlELFxuICAgICAgICAgICAgXCJ0YXJnZXRfaWRcIjogcGVlcl9pZCxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImFuc3dlclwiLFxuICAgICAgICAgICAgXCJzZHBcIjogX3BlZXJfbGlzdFtwZWVyX2lkXS5sb2NhbERlc2NyaXB0aW9uXG4gICAgICAgIH0sIHNvY2tldCk7XG4gICAgfSlcbiAgICAuY2F0Y2gobG9nX2Vycm9yKTtcbn1cblxuY29uc3QgaGFuZGxlQW5zd2VyTXNnID0gKG1zZzogYW55KSA9PiB7XG4gICAgbGV0IHBlZXJfaWQgPSBtc2dbJ3NlbmRlcl9pZCddO1xuICAgIGNvbnNvbGUubG9nKGBhbnN3ZXIgcmVjaWV2ZWQgZnJvbSA8JHtwZWVyX2lkfT5gKTtcbiAgICBsZXQgZGVzYyA9IG5ldyBSVENTZXNzaW9uRGVzY3JpcHRpb24obXNnWydzZHAnXSk7XG4gICAgX3BlZXJfbGlzdFtwZWVyX2lkXS5zZXRSZW1vdGVEZXNjcmlwdGlvbihkZXNjKVxufVxuXG5cbmNvbnN0IGhhbmRsZUlDRUNhbmRpZGF0ZUV2ZW50ID0gKGV2ZW50OiB7IGNhbmRpZGF0ZTogYW55OyB9LCBwZWVyX2lkOiBzdHJpbmcsIHNvY2tldDogYW55KSA9PiB7XG4gICAgaWYoZXZlbnQuY2FuZGlkYXRlKXtcbiAgICAgICAgc2VuZFZpYVNlcnZlcih7XG4gICAgICAgICAgICBcInNlbmRlcl9pZFwiOiBteUlELFxuICAgICAgICAgICAgXCJ0YXJnZXRfaWRcIjogcGVlcl9pZCxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm5ldy1pY2UtY2FuZGlkYXRlXCIsXG4gICAgICAgICAgICBcImNhbmRpZGF0ZVwiOiBldmVudC5jYW5kaWRhdGVcbiAgICAgICAgfSwgc29ja2V0KTtcbiAgICB9XG59XG5cbmNvbnN0IGhhbmRsZU5ld0lDRUNhbmRpZGF0ZU1zZyA9IChtc2c6IGFueSkgPT4ge1xuICAgIGxldCBwZWVyX2lkO1xuICAgIGNvbnNvbGUubG9nKGBJQ0UgY2FuZGlkYXRlIHJlY2lldmVkIGZyb20gPCR7cGVlcl9pZH0+YCk7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IG5ldyBSVENJY2VDYW5kaWRhdGUobXNnLmNhbmRpZGF0ZSk7XG4gICAgX3BlZXJfbGlzdFttc2dbXCJzZW5kZXJfaWRcIl1dLmFkZEljZUNhbmRpZGF0ZShjYW5kaWRhdGUpXG4gICAgLmNhdGNoKGxvZ19lcnJvcik7XG59XG5cblxuY29uc3QgaGFuZGxlVHJhY2tFdmVudCA9IChldmVudDogYW55LCBwZWVyX2lkOiBzdHJpbmcpID0+XG57XG4gICAgY29uc29sZS5sb2coYHRyYWNrIGV2ZW50IHJlY2lldmVkIGZyb20gPCR7cGVlcl9pZH0+YCk7XG5cbiAgICBpZiAoZXZlbnQuc3RyZWFtcyAmJiBwZWVyX2lkKSB7XG4gICAgICAgIGNvbnN0IHZpZGVvT2JqID0gZ2V0VmlkZW9PYmoocGVlcl9pZClcbiAgICAgICAgaWYgKCF2aWRlb09iaikge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgdmlkZW9PYmouc3JjT2JqZWN0ID0gZXZlbnQuc3RyZWFtc1swXTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVSZW1vdGVQZWVyQ29ubmVjdGlvbnMobmV3U3RyZWFtOiB7IGdldFZpZGVvVHJhY2tzOiAoKSA9PiBhbnlbXTsgfSkge1xuICAgIGZvciAoY29uc3QgcGVlcklkIGluIF9wZWVyX2xpc3QpIHtcbiAgICAgICAgaWYgKF9wZWVyX2xpc3QuaGFzT3duUHJvcGVydHkocGVlcklkKSkge1xuICAgICAgICAgICAgY29uc3QgcGVlckNvbm5lY3Rpb24gPSBfcGVlcl9saXN0W3BlZXJJZF07XG4gICAgICAgICAgICBjb25zdCBzZW5kZXJzID0gcGVlckNvbm5lY3Rpb24uZ2V0U2VuZGVycygpO1xuICAgICAgICAgICAgc2VuZGVycy5mb3JFYWNoKChzZW5kZXI6IHsgdHJhY2s6IHsga2luZDogc3RyaW5nOyB9OyByZXBsYWNlVHJhY2s6IChhcmcwOiBhbnkpID0+IHZvaWQ7IH0pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoc2VuZGVyLnRyYWNrLmtpbmQgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VuZGVyLnJlcGxhY2VUcmFjayhuZXdTdHJlYW0uZ2V0VmlkZW9UcmFja3MoKVswXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59Il0sIm5hbWVzIjpbImFkZFZpZGVvRWxlbWVudCIsImdldFZpZGVvT2JqIiwicmVtb3ZlVmlkZW9FbGVtZW50IiwibXlJRCIsIl9wZWVyX2xpc3QiLCJvbkNvbm5lY3QiLCJzb2NrZXQiLCJyb29tSWQiLCJyb29tTmFtZSIsImRpc3BsYXlOYW1lIiwibGFuZ3VhZ2UiLCJjb25zb2xlIiwibG9nIiwiZW1pdCIsInJvb21faWQiLCJyb29tX25hbWUiLCJkaXNwbGF5X25hbWUiLCJvblVzZXJDb25uZWN0IiwiZGF0YSIsInBlZXJfaWQiLCJ1bmRlZmluZWQiLCJvblVzZXJEaXNjb25uZWN0ZWQiLCJjbG9zZUNvbm5lY3Rpb24iLCJvblVzZXJMaXN0IiwibXlWaWRlbyIsInJlY3ZkX2xpc3QiLCJoYXNPd25Qcm9wZXJ0eSIsImV4Iiwic3RhcnRfd2VicnRjIiwib25pY2VjYW5kaWRhdGUiLCJvbnRyYWNrIiwib25uZWdvdGlhdGlvbm5lZWRlZCIsImxvZ191c2VyX2xpc3QiLCJrZXkiLCJQQ19DT05GSUciLCJpY2VTZXJ2ZXJzIiwidXJscyIsImxvZ19lcnJvciIsImUiLCJzZW5kVmlhU2VydmVyIiwib25EYXRhIiwibXNnIiwiaGFuZGxlT2ZmZXJNc2ciLCJoYW5kbGVBbnN3ZXJNc2ciLCJoYW5kbGVOZXdJQ0VDYW5kaWRhdGVNc2ciLCJpbnZpdGUiLCJjcmVhdGVQZWVyQ29ubmVjdGlvbiIsImxvY2FsX3N0cmVhbSIsInNyY09iamVjdCIsIk1lZGlhU3RyZWFtIiwiZ2V0VHJhY2tzIiwiZm9yRWFjaCIsInRyYWNrIiwiYWRkVHJhY2siLCJlcnJvciIsIlJUQ1BlZXJDb25uZWN0aW9uIiwiZXZlbnQiLCJoYW5kbGVJQ0VDYW5kaWRhdGVFdmVudCIsImhhbmRsZVRyYWNrRXZlbnQiLCJoYW5kbGVOZWdvdGlhdGlvbk5lZWRlZEV2ZW50IiwiY3JlYXRlT2ZmZXIiLCJ0aGVuIiwib2ZmZXIiLCJzZXRMb2NhbERlc2NyaXB0aW9uIiwibG9jYWxEZXNjcmlwdGlvbiIsImNhdGNoIiwiZGVzYyIsIlJUQ1Nlc3Npb25EZXNjcmlwdGlvbiIsInNldFJlbW90ZURlc2NyaXB0aW9uIiwiY3JlYXRlQW5zd2VyIiwiYW5zd2VyIiwiY2FuZGlkYXRlIiwiUlRDSWNlQ2FuZGlkYXRlIiwiYWRkSWNlQ2FuZGlkYXRlIiwic3RyZWFtcyIsInZpZGVvT2JqIiwidXBkYXRlUmVtb3RlUGVlckNvbm5lY3Rpb25zIiwibmV3U3RyZWFtIiwicGVlcklkIiwicGVlckNvbm5lY3Rpb24iLCJzZW5kZXJzIiwiZ2V0U2VuZGVycyIsInNlbmRlciIsImtpbmQiLCJyZXBsYWNlVHJhY2siLCJnZXRWaWRlb1RyYWNrcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/utils/socketNetworkHandlers.ts\n"));

/***/ })

});