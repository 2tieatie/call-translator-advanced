"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/call/[roomId]/[roomName]/room/page",{

/***/ "(app-pages-browser)/./app/utils/socketNetworkHandlers.ts":
/*!********************************************!*\
  !*** ./app/utils/socketNetworkHandlers.ts ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPeerConnection: function() { return /* binding */ createPeerConnection; },\n/* harmony export */   handleNegotiationNeededEvent: function() { return /* binding */ handleNegotiationNeededEvent; },\n/* harmony export */   invite: function() { return /* binding */ invite; },\n/* harmony export */   onConnect: function() { return /* binding */ onConnect; },\n/* harmony export */   onData: function() { return /* binding */ onData; },\n/* harmony export */   onUserConnect: function() { return /* binding */ onUserConnect; },\n/* harmony export */   onUserDisconnected: function() { return /* binding */ onUserDisconnected; },\n/* harmony export */   onUserList: function() { return /* binding */ onUserList; },\n/* harmony export */   sendViaServer: function() { return /* binding */ sendViaServer; },\n/* harmony export */   start_webrtc: function() { return /* binding */ start_webrtc; },\n/* harmony export */   updateRemotePeerConnections: function() { return /* binding */ updateRemotePeerConnections; }\n/* harmony export */ });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/utils/utils */ \"(app-pages-browser)/./app/utils/utils.ts\");\n\nlet myID;\nlet _peer_list = {};\nconst onConnect = (socket, roomId, roomName, displayName, language)=>{\n    console.log(\"socket connected....\");\n    socket.emit(\"join-room\", {\n        room_id: roomId,\n        room_name: roomName,\n        display_name: displayName,\n        language: language\n    });\n};\nconst onUserConnect = (data)=>{\n    console.log(\"user-connect \", data);\n    let peer_id = data[\"sid\"];\n    let display_name = data[\"name\"];\n    _peer_list[peer_id] = undefined;\n    (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.addVideoElement)(peer_id, display_name);\n};\nconst onUserDisconnected = (data)=>{\n    console.log(\"user-disconnect \", data);\n    let peer_id = data[\"sid\"];\n    closeConnection(peer_id);\n    (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.removeVideoElement)(peer_id);\n};\nconst onUserList = (data, socket, myVideo)=>{\n    console.log(\"user list recvd \", data);\n    myID = data[\"my_id\"];\n    if (\"list\" in data) {\n        let recvd_list = data[\"list\"];\n        try {\n            for(const peer_id in _peer_list){\n                if (!recvd_list.hasOwnProperty(peer_id)) {\n                    closeConnection(peer_id);\n                    (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.removeVideoElement)(peer_id);\n                }\n            }\n        } catch (ex) {\n            console.log(ex);\n        }\n        // add existing users to user list\n        for(let peer_id in recvd_list){\n            let display_name = recvd_list[peer_id];\n            _peer_list[peer_id] = undefined;\n            (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.addVideoElement)(peer_id, display_name);\n        }\n        start_webrtc(myVideo, socket);\n    }\n};\nconst closeConnection = (peer_id)=>{\n    if (peer_id in _peer_list) {\n        _peer_list[peer_id].onicecandidate = null;\n        _peer_list[peer_id].ontrack = null;\n        _peer_list[peer_id].onnegotiationneeded = null;\n        delete _peer_list[peer_id]; // remove user from user list\n    }\n};\nconst log_user_list = ()=>{\n    for(let key in _peer_list){\n        console.log(\"\".concat(key, \": \").concat(_peer_list[key]));\n    }\n};\n//---------------[ webrtc ]--------------------\nlet PC_CONFIG = {\n    iceServers: [\n        {\n            urls: [\n                \"stun:stun.l.google.com:19302\",\n                \"stun:stun1.l.google.com:19302\"\n            ]\n        }\n    ]\n};\nconst log_error = (e)=>{\n    console.log(\"[ERROR] \", e);\n};\nconst sendViaServer = (data, socket)=>{\n    socket.emit(\"data\", data);\n};\nconst onData = (msg, socket, myVideo)=>{\n    switch(msg[\"type\"]){\n        case \"offer\":\n            handleOfferMsg(msg, socket, myVideo);\n            break;\n        case \"answer\":\n            handleAnswerMsg(msg);\n            break;\n        case \"new-ice-candidate\":\n            handleNewICECandidateMsg(msg);\n            break;\n    }\n};\nconst start_webrtc = (myVideo, socket)=>{\n    // send offer to all other members\n    for(let peer_id in _peer_list){\n        invite(peer_id, myVideo, socket);\n    }\n};\nconst invite = (peer_id, myVideo, socket)=>{\n    if (_peer_list[peer_id]) {\n        console.log(\"[Not supposed to happen!] Attempting to start a connection that already exists!\");\n        return;\n    } else if (peer_id === myID) {\n        console.log(\"[Not supposed to happen!] Trying to connect to self!\");\n        return;\n    } else {\n        console.log(\"Creating peer connection for <\".concat(peer_id, \"> ...\"));\n        createPeerConnection(peer_id, socket);\n        let local_stream = myVideo === null || myVideo === void 0 ? void 0 : myVideo.srcObject;\n        if (local_stream && local_stream instanceof MediaStream) {\n            local_stream.getTracks().forEach((track)=>{\n                _peer_list[peer_id].addTrack(track, local_stream);\n            });\n        } else {\n            console.error(\"Local stream is null or not a MediaStream\");\n            console.log(myVideo);\n        }\n    }\n};\nconst createPeerConnection = (peer_id, socket)=>{\n    _peer_list[peer_id] = new RTCPeerConnection(PC_CONFIG);\n    _peer_list[peer_id].onicecandidate = (event)=>{\n        handleICECandidateEvent(event, peer_id, socket);\n    };\n    _peer_list[peer_id].ontrack = (event)=>{\n        handleTrackEvent(event, peer_id);\n    };\n    _peer_list[peer_id].onnegotiationneeded = ()=>{\n        handleNegotiationNeededEvent(peer_id, socket);\n    };\n};\nconst handleNegotiationNeededEvent = (peer_id, socket)=>{\n    _peer_list[peer_id].createOffer().then((offer)=>{\n        return _peer_list[peer_id].setLocalDescription(offer);\n    }).then(()=>{\n        console.log(\"sending offer to <\".concat(peer_id, \"> ...\"));\n        sendViaServer({\n            \"sender_id\": myID,\n            \"target_id\": peer_id,\n            \"type\": \"offer\",\n            \"sdp\": _peer_list[peer_id].localDescription\n        }, socket);\n    }).catch(log_error);\n};\nconst handleOfferMsg = (msg, socket, myVideo)=>{\n    let peer_id = msg[\"sender_id\"];\n    console.log(\"offer recieved from <\".concat(peer_id, \">\"));\n    createPeerConnection(peer_id, socket);\n    let desc = new RTCSessionDescription(msg[\"sdp\"]);\n    _peer_list[peer_id].setRemoteDescription(desc).then(()=>{\n        let local_stream = myVideo.srcObject;\n        local_stream.getTracks().forEach((track)=>{\n            try {\n                _peer_list[peer_id].addTrack(track, local_stream);\n            } catch (error) {\n                console.log(error);\n            }\n        });\n    }).then(()=>{\n        return _peer_list[peer_id].createAnswer();\n    }).then((answer)=>{\n        return _peer_list[peer_id].setLocalDescription(answer);\n    }).then(()=>{\n        console.log(\"sending answer to <\".concat(peer_id, \"> ...\"));\n        sendViaServer({\n            \"sender_id\": myID,\n            \"target_id\": peer_id,\n            \"type\": \"answer\",\n            \"sdp\": _peer_list[peer_id].localDescription\n        }, socket);\n    }).catch(log_error);\n};\nconst handleAnswerMsg = (msg)=>{\n    let peer_id = msg[\"sender_id\"];\n    console.log(\"answer recieved from <\".concat(peer_id, \">\"));\n    let desc = new RTCSessionDescription(msg[\"sdp\"]);\n    _peer_list[peer_id].setRemoteDescription(desc);\n};\nconst handleICECandidateEvent = (event, peer_id, socket)=>{\n    if (event.candidate) {\n        sendViaServer({\n            \"sender_id\": myID,\n            \"target_id\": peer_id,\n            \"type\": \"new-ice-candidate\",\n            \"candidate\": event.candidate\n        }, socket);\n    }\n};\nconst handleNewICECandidateMsg = (msg)=>{\n    let peer_id;\n    console.log(\"ICE candidate recieved from <\".concat(peer_id, \">\"));\n    let candidate = new RTCIceCandidate(msg.candidate);\n    _peer_list[msg[\"sender_id\"]].addIceCandidate(candidate).catch(log_error);\n};\nconst handleTrackEvent = (event, peer_id)=>{\n    console.log(\"track event recieved from <\".concat(peer_id, \">\"));\n    if (event.streams && peer_id) {\n        const videoObj = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.getVideoObj)(peer_id);\n        if (!videoObj) {\n            return;\n        }\n        videoObj.srcObject = event.streams[0];\n    }\n};\nfunction updateRemotePeerConnections(newStream) {\n    for(const peerId in _peer_list){\n        if (_peer_list.hasOwnProperty(peerId)) {\n            const peerConnection = _peer_list[peerId];\n            const senders = peerConnection.getSenders();\n            senders.forEach((sender)=>{\n                if (sender.track.kind === \"video\") {\n                    sender.replaceTrack(newStream.getVideoTracks()[0]);\n                }\n            });\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/utils/socketNetworkHandlers.ts\n"));

/***/ })

});